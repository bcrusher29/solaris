package fanart

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *Disk) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "ID"
	o = append(o, 0x86, 0xa2, 0x49, 0x44)
	o = msgp.AppendString(o, z.ID)
	// string "URL"
	o = append(o, 0xa3, 0x55, 0x52, 0x4c)
	o = msgp.AppendString(o, z.URL)
	// string "Lang"
	o = append(o, 0xa4, 0x4c, 0x61, 0x6e, 0x67)
	o = msgp.AppendString(o, z.Lang)
	// string "Likes"
	o = append(o, 0xa5, 0x4c, 0x69, 0x6b, 0x65, 0x73)
	o = msgp.AppendString(o, z.Likes)
	// string "Disc"
	o = append(o, 0xa4, 0x44, 0x69, 0x73, 0x63)
	o = msgp.AppendString(o, z.Disc)
	// string "DiscType"
	o = append(o, 0xa8, 0x44, 0x69, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.DiscType)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Disk) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "URL":
			z.URL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Lang":
			z.Lang, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Likes":
			z.Likes, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Disc":
			z.Disc, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "DiscType":
			z.DiscType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Disk) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ID) + 4 + msgp.StringPrefixSize + len(z.URL) + 5 + msgp.StringPrefixSize + len(z.Lang) + 6 + msgp.StringPrefixSize + len(z.Likes) + 5 + msgp.StringPrefixSize + len(z.Disc) + 9 + msgp.StringPrefixSize + len(z.DiscType)
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Image) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "ID"
	o = append(o, 0x84, 0xa2, 0x49, 0x44)
	o = msgp.AppendString(o, z.ID)
	// string "URL"
	o = append(o, 0xa3, 0x55, 0x52, 0x4c)
	o = msgp.AppendString(o, z.URL)
	// string "Lang"
	o = append(o, 0xa4, 0x4c, 0x61, 0x6e, 0x67)
	o = msgp.AppendString(o, z.Lang)
	// string "Likes"
	o = append(o, 0xa5, 0x4c, 0x69, 0x6b, 0x65, 0x73)
	o = msgp.AppendString(o, z.Likes)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Image) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "URL":
			z.URL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Lang":
			z.Lang, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Likes":
			z.Likes, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Image) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ID) + 4 + msgp.StringPrefixSize + len(z.URL) + 5 + msgp.StringPrefixSize + len(z.Lang) + 6 + msgp.StringPrefixSize + len(z.Likes)
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Movie) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 12
	// string "Name"
	o = append(o, 0x8c, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "TmdbID"
	o = append(o, 0xa6, 0x54, 0x6d, 0x64, 0x62, 0x49, 0x44)
	o = msgp.AppendString(o, z.TmdbID)
	// string "ImdbID"
	o = append(o, 0xa6, 0x49, 0x6d, 0x64, 0x62, 0x49, 0x44)
	o = msgp.AppendString(o, z.ImdbID)
	// string "HDMovieClearArt"
	o = append(o, 0xaf, 0x48, 0x44, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x72, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.HDMovieClearArt)))
	for za0001 := range z.HDMovieClearArt {
		if z.HDMovieClearArt[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.HDMovieClearArt[za0001].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "HDMovieLogo"
	o = append(o, 0xab, 0x48, 0x44, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x4c, 0x6f, 0x67, 0x6f)
	o = msgp.AppendArrayHeader(o, uint32(len(z.HDMovieLogo)))
	for za0002 := range z.HDMovieLogo {
		if z.HDMovieLogo[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.HDMovieLogo[za0002].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "MoviePoster"
	o = append(o, 0xab, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MoviePoster)))
	for za0003 := range z.MoviePoster {
		if z.MoviePoster[za0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.MoviePoster[za0003].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "MovieBackground"
	o = append(o, 0xaf, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MovieBackground)))
	for za0004 := range z.MovieBackground {
		if z.MovieBackground[za0004] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.MovieBackground[za0004].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "MovieDisc"
	o = append(o, 0xa9, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x69, 0x73, 0x63)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MovieDisc)))
	for za0005 := range z.MovieDisc {
		if z.MovieDisc[za0005] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.MovieDisc[za0005].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "MovieThumb"
	o = append(o, 0xaa, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MovieThumb)))
	for za0006 := range z.MovieThumb {
		if z.MovieThumb[za0006] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.MovieThumb[za0006].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "MovieArt"
	o = append(o, 0xa8, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x41, 0x72, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MovieArt)))
	for za0007 := range z.MovieArt {
		if z.MovieArt[za0007] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.MovieArt[za0007].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "MovieLogo"
	o = append(o, 0xa9, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x4c, 0x6f, 0x67, 0x6f)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MovieLogo)))
	for za0008 := range z.MovieLogo {
		if z.MovieLogo[za0008] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.MovieLogo[za0008].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "MovieBanner"
	o = append(o, 0xab, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MovieBanner)))
	for za0009 := range z.MovieBanner {
		if z.MovieBanner[za0009] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.MovieBanner[za0009].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Movie) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "TmdbID":
			z.TmdbID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "ImdbID":
			z.ImdbID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "HDMovieClearArt":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.HDMovieClearArt) >= int(zb0002) {
				z.HDMovieClearArt = (z.HDMovieClearArt)[:zb0002]
			} else {
				z.HDMovieClearArt = make([]*Image, zb0002)
			}
			for za0001 := range z.HDMovieClearArt {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.HDMovieClearArt[za0001] = nil
				} else {
					if z.HDMovieClearArt[za0001] == nil {
						z.HDMovieClearArt[za0001] = new(Image)
					}
					bts, err = z.HDMovieClearArt[za0001].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "HDMovieLogo":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.HDMovieLogo) >= int(zb0003) {
				z.HDMovieLogo = (z.HDMovieLogo)[:zb0003]
			} else {
				z.HDMovieLogo = make([]*Image, zb0003)
			}
			for za0002 := range z.HDMovieLogo {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.HDMovieLogo[za0002] = nil
				} else {
					if z.HDMovieLogo[za0002] == nil {
						z.HDMovieLogo[za0002] = new(Image)
					}
					bts, err = z.HDMovieLogo[za0002].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "MoviePoster":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.MoviePoster) >= int(zb0004) {
				z.MoviePoster = (z.MoviePoster)[:zb0004]
			} else {
				z.MoviePoster = make([]*Image, zb0004)
			}
			for za0003 := range z.MoviePoster {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.MoviePoster[za0003] = nil
				} else {
					if z.MoviePoster[za0003] == nil {
						z.MoviePoster[za0003] = new(Image)
					}
					bts, err = z.MoviePoster[za0003].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "MovieBackground":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.MovieBackground) >= int(zb0005) {
				z.MovieBackground = (z.MovieBackground)[:zb0005]
			} else {
				z.MovieBackground = make([]*Image, zb0005)
			}
			for za0004 := range z.MovieBackground {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.MovieBackground[za0004] = nil
				} else {
					if z.MovieBackground[za0004] == nil {
						z.MovieBackground[za0004] = new(Image)
					}
					bts, err = z.MovieBackground[za0004].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "MovieDisc":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.MovieDisc) >= int(zb0006) {
				z.MovieDisc = (z.MovieDisc)[:zb0006]
			} else {
				z.MovieDisc = make([]*Disk, zb0006)
			}
			for za0005 := range z.MovieDisc {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.MovieDisc[za0005] = nil
				} else {
					if z.MovieDisc[za0005] == nil {
						z.MovieDisc[za0005] = new(Disk)
					}
					bts, err = z.MovieDisc[za0005].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "MovieThumb":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.MovieThumb) >= int(zb0007) {
				z.MovieThumb = (z.MovieThumb)[:zb0007]
			} else {
				z.MovieThumb = make([]*Image, zb0007)
			}
			for za0006 := range z.MovieThumb {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.MovieThumb[za0006] = nil
				} else {
					if z.MovieThumb[za0006] == nil {
						z.MovieThumb[za0006] = new(Image)
					}
					bts, err = z.MovieThumb[za0006].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "MovieArt":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.MovieArt) >= int(zb0008) {
				z.MovieArt = (z.MovieArt)[:zb0008]
			} else {
				z.MovieArt = make([]*Image, zb0008)
			}
			for za0007 := range z.MovieArt {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.MovieArt[za0007] = nil
				} else {
					if z.MovieArt[za0007] == nil {
						z.MovieArt[za0007] = new(Image)
					}
					bts, err = z.MovieArt[za0007].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "MovieLogo":
			var zb0009 uint32
			zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.MovieLogo) >= int(zb0009) {
				z.MovieLogo = (z.MovieLogo)[:zb0009]
			} else {
				z.MovieLogo = make([]*Image, zb0009)
			}
			for za0008 := range z.MovieLogo {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.MovieLogo[za0008] = nil
				} else {
					if z.MovieLogo[za0008] == nil {
						z.MovieLogo[za0008] = new(Image)
					}
					bts, err = z.MovieLogo[za0008].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "MovieBanner":
			var zb0010 uint32
			zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.MovieBanner) >= int(zb0010) {
				z.MovieBanner = (z.MovieBanner)[:zb0010]
			} else {
				z.MovieBanner = make([]*Image, zb0010)
			}
			for za0009 := range z.MovieBanner {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.MovieBanner[za0009] = nil
				} else {
					if z.MovieBanner[za0009] == nil {
						z.MovieBanner[za0009] = new(Image)
					}
					bts, err = z.MovieBanner[za0009].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Movie) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 7 + msgp.StringPrefixSize + len(z.TmdbID) + 7 + msgp.StringPrefixSize + len(z.ImdbID) + 16 + msgp.ArrayHeaderSize
	for za0001 := range z.HDMovieClearArt {
		if z.HDMovieClearArt[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.HDMovieClearArt[za0001].Msgsize()
		}
	}
	s += 12 + msgp.ArrayHeaderSize
	for za0002 := range z.HDMovieLogo {
		if z.HDMovieLogo[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += z.HDMovieLogo[za0002].Msgsize()
		}
	}
	s += 12 + msgp.ArrayHeaderSize
	for za0003 := range z.MoviePoster {
		if z.MoviePoster[za0003] == nil {
			s += msgp.NilSize
		} else {
			s += z.MoviePoster[za0003].Msgsize()
		}
	}
	s += 16 + msgp.ArrayHeaderSize
	for za0004 := range z.MovieBackground {
		if z.MovieBackground[za0004] == nil {
			s += msgp.NilSize
		} else {
			s += z.MovieBackground[za0004].Msgsize()
		}
	}
	s += 10 + msgp.ArrayHeaderSize
	for za0005 := range z.MovieDisc {
		if z.MovieDisc[za0005] == nil {
			s += msgp.NilSize
		} else {
			s += z.MovieDisc[za0005].Msgsize()
		}
	}
	s += 11 + msgp.ArrayHeaderSize
	for za0006 := range z.MovieThumb {
		if z.MovieThumb[za0006] == nil {
			s += msgp.NilSize
		} else {
			s += z.MovieThumb[za0006].Msgsize()
		}
	}
	s += 9 + msgp.ArrayHeaderSize
	for za0007 := range z.MovieArt {
		if z.MovieArt[za0007] == nil {
			s += msgp.NilSize
		} else {
			s += z.MovieArt[za0007].Msgsize()
		}
	}
	s += 10 + msgp.ArrayHeaderSize
	for za0008 := range z.MovieLogo {
		if z.MovieLogo[za0008] == nil {
			s += msgp.NilSize
		} else {
			s += z.MovieLogo[za0008].Msgsize()
		}
	}
	s += 12 + msgp.ArrayHeaderSize
	for za0009 := range z.MovieBanner {
		if z.MovieBanner[za0009] == nil {
			s += msgp.NilSize
		} else {
			s += z.MovieBanner[za0009].Msgsize()
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Show) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 14
	// string "Name"
	o = append(o, 0x8e, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "TvdbID"
	o = append(o, 0xa6, 0x54, 0x76, 0x64, 0x62, 0x49, 0x44)
	o = msgp.AppendString(o, z.TvdbID)
	// string "HDClearArt"
	o = append(o, 0xaa, 0x48, 0x44, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x72, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.HDClearArt)))
	for za0001 := range z.HDClearArt {
		if z.HDClearArt[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Image"
			o = append(o, 0x82, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
			o, err = z.HDClearArt[za0001].Image.MarshalMsg(o)
			if err != nil {
				return
			}
			// string "Season"
			o = append(o, 0xa6, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e)
			o = msgp.AppendString(o, z.HDClearArt[za0001].Season)
		}
	}
	// string "HdtvLogo"
	o = append(o, 0xa8, 0x48, 0x64, 0x74, 0x76, 0x4c, 0x6f, 0x67, 0x6f)
	o = msgp.AppendArrayHeader(o, uint32(len(z.HdtvLogo)))
	for za0002 := range z.HdtvLogo {
		if z.HdtvLogo[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Image"
			o = append(o, 0x82, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
			o, err = z.HdtvLogo[za0002].Image.MarshalMsg(o)
			if err != nil {
				return
			}
			// string "Season"
			o = append(o, 0xa6, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e)
			o = msgp.AppendString(o, z.HdtvLogo[za0002].Season)
		}
	}
	// string "ClearLogo"
	o = append(o, 0xa9, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4c, 0x6f, 0x67, 0x6f)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ClearLogo)))
	for za0003 := range z.ClearLogo {
		if z.ClearLogo[za0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Image"
			o = append(o, 0x82, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
			o, err = z.ClearLogo[za0003].Image.MarshalMsg(o)
			if err != nil {
				return
			}
			// string "Season"
			o = append(o, 0xa6, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e)
			o = msgp.AppendString(o, z.ClearLogo[za0003].Season)
		}
	}
	// string "ClearArt"
	o = append(o, 0xa8, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x72, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ClearArt)))
	for za0004 := range z.ClearArt {
		if z.ClearArt[za0004] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Image"
			o = append(o, 0x82, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
			o, err = z.ClearArt[za0004].Image.MarshalMsg(o)
			if err != nil {
				return
			}
			// string "Season"
			o = append(o, 0xa6, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e)
			o = msgp.AppendString(o, z.ClearArt[za0004].Season)
		}
	}
	// string "TVPoster"
	o = append(o, 0xa8, 0x54, 0x56, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TVPoster)))
	for za0005 := range z.TVPoster {
		if z.TVPoster[za0005] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Image"
			o = append(o, 0x82, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
			o, err = z.TVPoster[za0005].Image.MarshalMsg(o)
			if err != nil {
				return
			}
			// string "Season"
			o = append(o, 0xa6, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e)
			o = msgp.AppendString(o, z.TVPoster[za0005].Season)
		}
	}
	// string "TVBanner"
	o = append(o, 0xa8, 0x54, 0x56, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TVBanner)))
	for za0006 := range z.TVBanner {
		if z.TVBanner[za0006] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Image"
			o = append(o, 0x82, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
			o, err = z.TVBanner[za0006].Image.MarshalMsg(o)
			if err != nil {
				return
			}
			// string "Season"
			o = append(o, 0xa6, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e)
			o = msgp.AppendString(o, z.TVBanner[za0006].Season)
		}
	}
	// string "TVThumb"
	o = append(o, 0xa7, 0x54, 0x56, 0x54, 0x68, 0x75, 0x6d, 0x62)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TVThumb)))
	for za0007 := range z.TVThumb {
		if z.TVThumb[za0007] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Image"
			o = append(o, 0x82, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
			o, err = z.TVThumb[za0007].Image.MarshalMsg(o)
			if err != nil {
				return
			}
			// string "Season"
			o = append(o, 0xa6, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e)
			o = msgp.AppendString(o, z.TVThumb[za0007].Season)
		}
	}
	// string "ShowBackground"
	o = append(o, 0xae, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ShowBackground)))
	for za0008 := range z.ShowBackground {
		if z.ShowBackground[za0008] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Image"
			o = append(o, 0x82, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
			o, err = z.ShowBackground[za0008].Image.MarshalMsg(o)
			if err != nil {
				return
			}
			// string "Season"
			o = append(o, 0xa6, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e)
			o = msgp.AppendString(o, z.ShowBackground[za0008].Season)
		}
	}
	// string "SeasonPoster"
	o = append(o, 0xac, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72)
	o = msgp.AppendArrayHeader(o, uint32(len(z.SeasonPoster)))
	for za0009 := range z.SeasonPoster {
		if z.SeasonPoster[za0009] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Image"
			o = append(o, 0x82, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
			o, err = z.SeasonPoster[za0009].Image.MarshalMsg(o)
			if err != nil {
				return
			}
			// string "Season"
			o = append(o, 0xa6, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e)
			o = msgp.AppendString(o, z.SeasonPoster[za0009].Season)
		}
	}
	// string "SeasonThumb"
	o = append(o, 0xab, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x68, 0x75, 0x6d, 0x62)
	o = msgp.AppendArrayHeader(o, uint32(len(z.SeasonThumb)))
	for za0010 := range z.SeasonThumb {
		if z.SeasonThumb[za0010] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Image"
			o = append(o, 0x82, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
			o, err = z.SeasonThumb[za0010].Image.MarshalMsg(o)
			if err != nil {
				return
			}
			// string "Season"
			o = append(o, 0xa6, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e)
			o = msgp.AppendString(o, z.SeasonThumb[za0010].Season)
		}
	}
	// string "SeasonBanner"
	o = append(o, 0xac, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72)
	o = msgp.AppendArrayHeader(o, uint32(len(z.SeasonBanner)))
	for za0011 := range z.SeasonBanner {
		if z.SeasonBanner[za0011] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Image"
			o = append(o, 0x82, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
			o, err = z.SeasonBanner[za0011].Image.MarshalMsg(o)
			if err != nil {
				return
			}
			// string "Season"
			o = append(o, 0xa6, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e)
			o = msgp.AppendString(o, z.SeasonBanner[za0011].Season)
		}
	}
	// string "CharacterArt"
	o = append(o, 0xac, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.CharacterArt)))
	for za0012 := range z.CharacterArt {
		if z.CharacterArt[za0012] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Image"
			o = append(o, 0x82, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
			o, err = z.CharacterArt[za0012].Image.MarshalMsg(o)
			if err != nil {
				return
			}
			// string "Season"
			o = append(o, 0xa6, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e)
			o = msgp.AppendString(o, z.CharacterArt[za0012].Season)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Show) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "TvdbID":
			z.TvdbID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "HDClearArt":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.HDClearArt) >= int(zb0002) {
				z.HDClearArt = (z.HDClearArt)[:zb0002]
			} else {
				z.HDClearArt = make([]*ShowImage, zb0002)
			}
			for za0001 := range z.HDClearArt {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.HDClearArt[za0001] = nil
				} else {
					if z.HDClearArt[za0001] == nil {
						z.HDClearArt[za0001] = new(ShowImage)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Image":
							bts, err = z.HDClearArt[za0001].Image.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						case "Season":
							z.HDClearArt[za0001].Season, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "HdtvLogo":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.HdtvLogo) >= int(zb0004) {
				z.HdtvLogo = (z.HdtvLogo)[:zb0004]
			} else {
				z.HdtvLogo = make([]*ShowImage, zb0004)
			}
			for za0002 := range z.HdtvLogo {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.HdtvLogo[za0002] = nil
				} else {
					if z.HdtvLogo[za0002] == nil {
						z.HdtvLogo[za0002] = new(ShowImage)
					}
					var zb0005 uint32
					zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0005 > 0 {
						zb0005--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Image":
							bts, err = z.HdtvLogo[za0002].Image.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						case "Season":
							z.HdtvLogo[za0002].Season, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "ClearLogo":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.ClearLogo) >= int(zb0006) {
				z.ClearLogo = (z.ClearLogo)[:zb0006]
			} else {
				z.ClearLogo = make([]*ShowImage, zb0006)
			}
			for za0003 := range z.ClearLogo {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.ClearLogo[za0003] = nil
				} else {
					if z.ClearLogo[za0003] == nil {
						z.ClearLogo[za0003] = new(ShowImage)
					}
					var zb0007 uint32
					zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0007 > 0 {
						zb0007--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Image":
							bts, err = z.ClearLogo[za0003].Image.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						case "Season":
							z.ClearLogo[za0003].Season, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "ClearArt":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.ClearArt) >= int(zb0008) {
				z.ClearArt = (z.ClearArt)[:zb0008]
			} else {
				z.ClearArt = make([]*ShowImage, zb0008)
			}
			for za0004 := range z.ClearArt {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.ClearArt[za0004] = nil
				} else {
					if z.ClearArt[za0004] == nil {
						z.ClearArt[za0004] = new(ShowImage)
					}
					var zb0009 uint32
					zb0009, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0009 > 0 {
						zb0009--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Image":
							bts, err = z.ClearArt[za0004].Image.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						case "Season":
							z.ClearArt[za0004].Season, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "TVPoster":
			var zb0010 uint32
			zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.TVPoster) >= int(zb0010) {
				z.TVPoster = (z.TVPoster)[:zb0010]
			} else {
				z.TVPoster = make([]*ShowImage, zb0010)
			}
			for za0005 := range z.TVPoster {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.TVPoster[za0005] = nil
				} else {
					if z.TVPoster[za0005] == nil {
						z.TVPoster[za0005] = new(ShowImage)
					}
					var zb0011 uint32
					zb0011, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0011 > 0 {
						zb0011--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Image":
							bts, err = z.TVPoster[za0005].Image.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						case "Season":
							z.TVPoster[za0005].Season, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "TVBanner":
			var zb0012 uint32
			zb0012, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.TVBanner) >= int(zb0012) {
				z.TVBanner = (z.TVBanner)[:zb0012]
			} else {
				z.TVBanner = make([]*ShowImage, zb0012)
			}
			for za0006 := range z.TVBanner {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.TVBanner[za0006] = nil
				} else {
					if z.TVBanner[za0006] == nil {
						z.TVBanner[za0006] = new(ShowImage)
					}
					var zb0013 uint32
					zb0013, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0013 > 0 {
						zb0013--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Image":
							bts, err = z.TVBanner[za0006].Image.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						case "Season":
							z.TVBanner[za0006].Season, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "TVThumb":
			var zb0014 uint32
			zb0014, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.TVThumb) >= int(zb0014) {
				z.TVThumb = (z.TVThumb)[:zb0014]
			} else {
				z.TVThumb = make([]*ShowImage, zb0014)
			}
			for za0007 := range z.TVThumb {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.TVThumb[za0007] = nil
				} else {
					if z.TVThumb[za0007] == nil {
						z.TVThumb[za0007] = new(ShowImage)
					}
					var zb0015 uint32
					zb0015, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0015 > 0 {
						zb0015--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Image":
							bts, err = z.TVThumb[za0007].Image.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						case "Season":
							z.TVThumb[za0007].Season, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "ShowBackground":
			var zb0016 uint32
			zb0016, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.ShowBackground) >= int(zb0016) {
				z.ShowBackground = (z.ShowBackground)[:zb0016]
			} else {
				z.ShowBackground = make([]*ShowImage, zb0016)
			}
			for za0008 := range z.ShowBackground {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.ShowBackground[za0008] = nil
				} else {
					if z.ShowBackground[za0008] == nil {
						z.ShowBackground[za0008] = new(ShowImage)
					}
					var zb0017 uint32
					zb0017, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0017 > 0 {
						zb0017--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Image":
							bts, err = z.ShowBackground[za0008].Image.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						case "Season":
							z.ShowBackground[za0008].Season, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "SeasonPoster":
			var zb0018 uint32
			zb0018, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.SeasonPoster) >= int(zb0018) {
				z.SeasonPoster = (z.SeasonPoster)[:zb0018]
			} else {
				z.SeasonPoster = make([]*ShowImage, zb0018)
			}
			for za0009 := range z.SeasonPoster {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.SeasonPoster[za0009] = nil
				} else {
					if z.SeasonPoster[za0009] == nil {
						z.SeasonPoster[za0009] = new(ShowImage)
					}
					var zb0019 uint32
					zb0019, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0019 > 0 {
						zb0019--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Image":
							bts, err = z.SeasonPoster[za0009].Image.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						case "Season":
							z.SeasonPoster[za0009].Season, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "SeasonThumb":
			var zb0020 uint32
			zb0020, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.SeasonThumb) >= int(zb0020) {
				z.SeasonThumb = (z.SeasonThumb)[:zb0020]
			} else {
				z.SeasonThumb = make([]*ShowImage, zb0020)
			}
			for za0010 := range z.SeasonThumb {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.SeasonThumb[za0010] = nil
				} else {
					if z.SeasonThumb[za0010] == nil {
						z.SeasonThumb[za0010] = new(ShowImage)
					}
					var zb0021 uint32
					zb0021, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0021 > 0 {
						zb0021--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Image":
							bts, err = z.SeasonThumb[za0010].Image.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						case "Season":
							z.SeasonThumb[za0010].Season, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "SeasonBanner":
			var zb0022 uint32
			zb0022, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.SeasonBanner) >= int(zb0022) {
				z.SeasonBanner = (z.SeasonBanner)[:zb0022]
			} else {
				z.SeasonBanner = make([]*ShowImage, zb0022)
			}
			for za0011 := range z.SeasonBanner {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.SeasonBanner[za0011] = nil
				} else {
					if z.SeasonBanner[za0011] == nil {
						z.SeasonBanner[za0011] = new(ShowImage)
					}
					var zb0023 uint32
					zb0023, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0023 > 0 {
						zb0023--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Image":
							bts, err = z.SeasonBanner[za0011].Image.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						case "Season":
							z.SeasonBanner[za0011].Season, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "CharacterArt":
			var zb0024 uint32
			zb0024, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.CharacterArt) >= int(zb0024) {
				z.CharacterArt = (z.CharacterArt)[:zb0024]
			} else {
				z.CharacterArt = make([]*ShowImage, zb0024)
			}
			for za0012 := range z.CharacterArt {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.CharacterArt[za0012] = nil
				} else {
					if z.CharacterArt[za0012] == nil {
						z.CharacterArt[za0012] = new(ShowImage)
					}
					var zb0025 uint32
					zb0025, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0025 > 0 {
						zb0025--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Image":
							bts, err = z.CharacterArt[za0012].Image.UnmarshalMsg(bts)
							if err != nil {
								return
							}
						case "Season":
							z.CharacterArt[za0012].Season, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Show) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 7 + msgp.StringPrefixSize + len(z.TvdbID) + 11 + msgp.ArrayHeaderSize
	for za0001 := range z.HDClearArt {
		if z.HDClearArt[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 6 + z.HDClearArt[za0001].Image.Msgsize() + 7 + msgp.StringPrefixSize + len(z.HDClearArt[za0001].Season)
		}
	}
	s += 9 + msgp.ArrayHeaderSize
	for za0002 := range z.HdtvLogo {
		if z.HdtvLogo[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 6 + z.HdtvLogo[za0002].Image.Msgsize() + 7 + msgp.StringPrefixSize + len(z.HdtvLogo[za0002].Season)
		}
	}
	s += 10 + msgp.ArrayHeaderSize
	for za0003 := range z.ClearLogo {
		if z.ClearLogo[za0003] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 6 + z.ClearLogo[za0003].Image.Msgsize() + 7 + msgp.StringPrefixSize + len(z.ClearLogo[za0003].Season)
		}
	}
	s += 9 + msgp.ArrayHeaderSize
	for za0004 := range z.ClearArt {
		if z.ClearArt[za0004] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 6 + z.ClearArt[za0004].Image.Msgsize() + 7 + msgp.StringPrefixSize + len(z.ClearArt[za0004].Season)
		}
	}
	s += 9 + msgp.ArrayHeaderSize
	for za0005 := range z.TVPoster {
		if z.TVPoster[za0005] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 6 + z.TVPoster[za0005].Image.Msgsize() + 7 + msgp.StringPrefixSize + len(z.TVPoster[za0005].Season)
		}
	}
	s += 9 + msgp.ArrayHeaderSize
	for za0006 := range z.TVBanner {
		if z.TVBanner[za0006] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 6 + z.TVBanner[za0006].Image.Msgsize() + 7 + msgp.StringPrefixSize + len(z.TVBanner[za0006].Season)
		}
	}
	s += 8 + msgp.ArrayHeaderSize
	for za0007 := range z.TVThumb {
		if z.TVThumb[za0007] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 6 + z.TVThumb[za0007].Image.Msgsize() + 7 + msgp.StringPrefixSize + len(z.TVThumb[za0007].Season)
		}
	}
	s += 15 + msgp.ArrayHeaderSize
	for za0008 := range z.ShowBackground {
		if z.ShowBackground[za0008] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 6 + z.ShowBackground[za0008].Image.Msgsize() + 7 + msgp.StringPrefixSize + len(z.ShowBackground[za0008].Season)
		}
	}
	s += 13 + msgp.ArrayHeaderSize
	for za0009 := range z.SeasonPoster {
		if z.SeasonPoster[za0009] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 6 + z.SeasonPoster[za0009].Image.Msgsize() + 7 + msgp.StringPrefixSize + len(z.SeasonPoster[za0009].Season)
		}
	}
	s += 12 + msgp.ArrayHeaderSize
	for za0010 := range z.SeasonThumb {
		if z.SeasonThumb[za0010] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 6 + z.SeasonThumb[za0010].Image.Msgsize() + 7 + msgp.StringPrefixSize + len(z.SeasonThumb[za0010].Season)
		}
	}
	s += 13 + msgp.ArrayHeaderSize
	for za0011 := range z.SeasonBanner {
		if z.SeasonBanner[za0011] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 6 + z.SeasonBanner[za0011].Image.Msgsize() + 7 + msgp.StringPrefixSize + len(z.SeasonBanner[za0011].Season)
		}
	}
	s += 13 + msgp.ArrayHeaderSize
	for za0012 := range z.CharacterArt {
		if z.CharacterArt[za0012] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 6 + z.CharacterArt[za0012].Image.Msgsize() + 7 + msgp.StringPrefixSize + len(z.CharacterArt[za0012].Season)
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShowImage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Image"
	o = append(o, 0x82, 0xa5, 0x49, 0x6d, 0x61, 0x67, 0x65)
	o, err = z.Image.MarshalMsg(o)
	if err != nil {
		return
	}
	// string "Season"
	o = append(o, 0xa6, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Season)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShowImage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Image":
			bts, err = z.Image.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "Season":
			z.Season, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShowImage) Msgsize() (s int) {
	s = 1 + 6 + z.Image.Msgsize() + 7 + msgp.StringPrefixSize + len(z.Season)
	return
}
